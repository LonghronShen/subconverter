name: GitHub CI
on: [push]

concurrency: 
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  linux_x86_build:
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    runs-on: ubuntu-latest

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: x86
            distro: x86-v3.10
          - arch: amd64
            distro: amd64-v3.10

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: docker run -v $GITHUB_WORKSPACE:/root/workdir multiarch/alpine:${{ matrix.distro }} /bin/sh -c "apk add bash && cd /root/workdir/scripts && bash ./build.alpine.release.sh"
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: subconverter_${{ matrix.arch }}
        path: subconverter/
    - name: Package Release
      if: startsWith(github.ref, 'refs/tags/')
      run: tar czf subconverter_${{ matrix.arch }}.tar.gz subconverter
    - name: Draft Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: subconverter_${{ matrix.arch }}.tar.gz
        draft: true

  linux_arm_build:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04
          - arch: armv7
            distro: ubuntu20.04

    steps:
    - uses: actions/checkout@v2
    - uses: uraimo/run-on-arch-action@v2
      name: Run commands
      id: runcmd
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Not required, but speeds up builds by storing container images in
        # a GitHub package registry.
        githubToken: ${{ github.token }}

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          #!/bin/bash

          set -x

          apt update
          apt install -y git build-essential gcc-8 g++-8 libboost-all-dev \
            python3-pip libevent-dev libssl-dev \
            libcurl4-openssl-dev libpcre2-dev ninja-build pkg-config

          python3 -m pip install --upgrade pip
          PIP_ONLY_BINARY=cmake python3 -m pip install cmake || true

          hash cmake 2>/dev/null || {
              echo "Build CMake from source ..."
              cd /tmp
              git clone -b 'v3.25.1' --single-branch --depth 1 https://github.com/Kitware/CMake.git CMake
              cd CMake
              ./bootstrap --prefix=/usr/local
              make -j$(nproc)
              make install
              cd ..
              rm -rf CMake
          }

          cmake --version

        # Set an output parameter `uname` for use in subsequent steps
        run: |
          #!/bin/bash

          set -x

          uname -a

          echo ::set-output name=uname::$(uname -a)

          git config --global --add safe.directory '*'

          export CC=/usr/bin/gcc-8
          export CXX=/usr/bin/g++-8
          bash ./scripts/build.sh
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: subconverter_${{ matrix.arch }}
        path: subconverter/
    - name: Package Release
      if: startsWith(github.ref, 'refs/tags/')
      run: tar czf subconverter_${{ matrix.arch }}.tar.gz subconverter
    - name: Draft Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: subconverter_${{ matrix.arch }}.tar.gz
        draft: true

  macos_build:
    name: macOS Build
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cd scripts && ./build.macos.release.sh
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: subconverter_darwin64
        path: subconverter/
    - name: Package Release
      if: startsWith(github.ref, 'refs/tags/')
      run: tar czf subconverter_darwin64.tar.gz subconverter
    - name: Draft Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: subconverter_darwin64.tar.gz
        draft: true

  windows_build:
    runs-on: windows-latest
    name: Build on msystem ${{ matrix.msystem }} ${{ matrix.env }}

    # Run steps on a matrix of 3 arch/distro combinations
    strategy:
      matrix:
        include:
          - { msystem: CLANG64, env: clang-x86_64, name: win64 }
          - { msystem: CLANG32, env: clang-i686, name: win32 }

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: ${{matrix.msystem}}
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
          libevent:p
          pcre2:p
    - name: Build
      run: cd scripts && bash ./build.windows.release.sh
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: subconverter_${{ matrix.name }}
        path: subconverter/
    - name: Package Release
      if: startsWith(github.ref, 'refs/tags/')
      run: 7z a subconverter_${{ matrix.name }}.7z subconverter/
    - name: Draft Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: subconverter_${{ matrix.name }}.7z
        draft: true
